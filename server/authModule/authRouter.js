import Router from 'express';
import { check } from 'express-validator';
import controller from './authController.js';
import authMiddleware from '../middlewares/authMiddleware.js';
import roleMiddleware from '../middlewares/roleMiddleware.js';

const router = new Router();

/**
 * @swagger
 * components:
 *  schemas:
 *    reqUser:
 *      type: object
 *      required:
 *        - username
 *        - password
 *      properties:
 *        username:
 *          type: string
 *          description: username
 *        password:
 *          type: string
 *          description: password
 *      example:
 *        username: Katuh
 *        password: "1234"
 */

/**
 * @swagger
 * components:
 *  schemas:
 *    resUser:
 *      type: object
 *      properties:
 *        id:
 *          type: string
 *          description: autogenerated id in MongoDB
 *        username:
 *          type: string
 *          description: username
 *        roles:
 *          type: array
 *          description: default value USER
 *        accessToken:
 *          type: string
 *          description: JWT token for 24h
 *      example:
 *        id: "343sfaraba545"
 *        username: Katuh
 *        roles: ['USER']
 *        accessToken: "6345sfkhdkgfuhsu4345uhsg"
 */

/**
 * @swagger
 * tags:
 *  name: auth
 *  description: user managing API
 */

/**
 * @swagger
 * /auth/users:
 *  get:
 *    summary: Returns the list of all users
 *    tags: [auth]
 *    responses:
 *      200:
 *        description: The list of users
 *        content:
 *          application/json:
 *            schema:
 *              type: array
 *              items:
 *                $ref: '#/components/schemas/resUser'
 */
router.get('/users', controller.getUsers);

/**
 * @swagger
 * /auth/register:
 *  post:
 *    summary: create new user
 *    tags: [auth]
 *    requestBody:
 *      required: true
 *      content:
 *        application/json:
 *          schema:
 *            $ref: '#/components/schemas/reqUser'
 *    responses:
 *      200:
 *        description: User was succesfully created
 *        content:
 *          application/json:
 *            schema:
 *              $ref: '#/components/schemas/resUser'
 *      400:
 *        description: Some server error
 */

router.post('/register', [
  check('username', 'Имя пользователя не может быть пустым').notEmpty(),
  check('password', 'Пароль должен быть больше 4 и меньше 10 символов').isLength({ min: 4, max: 10 }),
], controller.register);

/**
 * @swagger
 * /auth/login:
 *  post:
 *    summary: login user
 *    tags: [auth]
 *    requestBody:
 *      required: true
 *      content:
 *        application/json:
 *          schema:
 *            $ref: '#components/schemas/reqUser'
 *    responses:
 *      200:
 *        description: User was succesfully authenticated
 *        content:
 *          application/json:
 *            schema:
 *              $ref: '#/components/schemas/resUser'
 *              token: token
 *      400:
 *        description: Some server error
 */

router.post('/login', controller.login);

export default router;
